#!/bin/bash
docker=docker
prefix=devbox_
default_image=koelnconcert/devbox
default_command=bash

function main {
    cmd=$1;shift
    case "$cmd" in
        "" | --help | -h) usage;;
        attach ) attach $@;;
        create ) create $@;;
        list ) list | column -t -n;;
        rm) remove $@;;
        * ) quit "unknown command \"$cmd\"";;
    esac
}

function exists {
    docker inspect $1 >/dev/null 2>&1
}

function running {
    is_running=$(docker inspect --format {{.State.Running}} $1)
    [ "$is_running" = "true" ]
}

function attach {
    box=$1;shift
    container=$prefix$box
    [ -z "$box" ] && quit "no devbox given"
    exists $container || quit "devbox '$box' does not exists"
    running $container && quit "already attached to devbox '$box'"

    $docker start -ai $@ $container
}

function create {
    box=$1;shift
    container=$prefix$box
    hostname=${container}
    [ -z "$box" ] && quit "no devbox given"
    exists $container && quit "devbox '$box' already exists"

    #try to find if images and command are specified (hacky)
    args=( $( sed 's/-\S*//g' <<< $@ ) ) # non-option params
    [ -z "${args[0]}" ] && image=$default_image
    [ -z "${args[1]}" ] && command=$default_command

    docker run -it --name $container --hostname $hostname $@ $image $command
}

function remove {
    box=$1;shift
    container=$prefix$box
    [ -z "$box" ] && quit "no devbox given"
    exists $container || quit "devbox '$box' does not exists"
    running $container && quit "devbox '$box' is still running"

    $docker rm $container >/dev/null
}

function list {
    boxes=$($docker ps -a | tail -n +2 | egrep -o "$prefix\S+\s*$" | tr -d " " | sed "s/^$prefix//" | sort )
    echo -e "NAME\tRUNNING\tSTARTED_AT\tFINISHED_AT\tIMAGE\tIMAGE_DATE"
    for box in $boxes; do
        container=$prefix$box
        inspect=$($docker inspect $container | jq .[0])
        function get {
            jq -r $@ <<< $inspect
        }
        running=$(get .State.Running)
        started=$(get .State.StartedAt[0:16])
        if [ "$running" = "false" ]; then
            finished=$(get .State.FinishedAt[0:16])
        else
            finished=
        fi
        image=$(get .Config.Image)
        real_image=$(get .Image)
        image_date=$($docker inspect $real_image | jq -r .[0].Created[0:16])
        echo -e "$box\t$running\t$started\t$finished\t$image\t$image_date"
    done
}

function quit {
    echo $1
    exit 1
}

function usage {
    name=`basename $0`
    ____=$(sed 's/./ /g' <<< $name) # space for alignment
    cat <<__EOF

  $name - tool to manage disposable development environments (devboxes)

    devboxes are docker containers starting into a shell.
    all devboxes are 'namespaced' in docker via a common name prefix ($prefix).

  usage:

    $name list                       - list all devboxes
    $name attach <devbox>            - attach to a existing devbox
    $name rm <devbox> [<devbox>]*    - create devbox(es)
    $name create <devbox> [<docker-params>] [image] [shell]
    $____                            - create a new devbox with name <devbox>

  tips:

    $name create <devbox> --rm       - remove devbox after shell has quit

  configuration:

    default image: $default_image
    default shell: $default_command
    docker prefix: $prefix

__EOF
    exit 0
}

main $@

