#!/bin/bash
CONFIG_FILE="$HOME/.devboxrc"

function init {
    [ -r $CONFIG_FILE ] && source $CONFIG_FILE
    : ${DOCKER_CMD:=docker}
    : ${DOCKER_PREFIX:=devbox_}
    : ${DEFAULT_IMAGE:=ubuntu}
    : ${DEFAULT_SHELL:=bash}
}

function main {
    cmd=$1;shift
    case "$cmd" in
        "" | --help | -h) usage;;
        attach ) attach $@;;
        build) build $@;;
        create ) create $@;;
        list ) list | column -t -n;;
        rm) remove $@;;
        * ) quit "unknown command \"$cmd\"";;
    esac
}

function exists {
    docker inspect $1 >/dev/null 2>&1
}

function running {
    is_running=$(docker inspect --format {{.State.Running}} $1)
    [ "$is_running" = "true" ]
}

function attach {
    box=$1;shift
    container=$DOCKER_PREFIX$box
    [ -z "$box" ] && quit "no devbox given"
    exists $container || quit "devbox '$box' does not exists"
    running $container && quit "already attached to devbox '$box'"

    $DOCKER_CMD start -ai $@ $container
}

function build {
    image=$1;shift
    [ -z "$image" ] && quit "no image tag given"
    $DOCKER_CMD build -t "$image" $@
}

function create {
    box=$1;shift
    container=$DOCKER_PREFIX$box
    hostname=${container}
    [ -z "$box" ] && quit "no devbox given"
    exists $container && quit "devbox '$box' already exists"

    #try to find if images and command are specified (hacky)
    args=( $( sed 's/-\S*//g' <<< $@ ) ) # non-option params
    [ -z "${args[0]}" ] && image=$DEFAULT_IMAGE
    [ -z "${args[1]}" ] && shell=$DEFAULT_SHELL

    $DOCKER_CMD run -it --name $container --hostname $hostname $@ $image $shell
}

function remove {
    box=$1;shift
    container=$DOCKER_PREFIX$box
    [ -z "$box" ] && quit "no devbox given"
    exists $container || quit "devbox '$box' does not exists"
    running $container && quit "devbox '$box' is still running"

    $DOCKER_CMD rm $container >/dev/null

    [ -n "$1" ] && remove $@
}

function list {
    boxes=$($DOCKER_CMD ps -a | tail -n +2 | egrep -o "$DOCKER_PREFIX\S+\s*$" | tr -d " " | sed "s/^$DOCKER_PREFIX//" | sort )
    echo -e "NAME\tRUNNING\tSTARTED_AT\tFINISHED_AT\tIMAGE\tIMAGE_DATE"
    for box in $boxes; do
        container=$DOCKER_PREFIX$box
        inspect=$($DOCKER_CMD inspect $container | jq .[0])
        function get {
            jq -r $@ <<< $inspect
        }
        running=$(get .State.Running)
        started=$(get .State.StartedAt[0:16])
        if [ "$running" = "false" ]; then
            finished=$(get .State.FinishedAt[0:16])
        else
            finished=
        fi
        image=$(get .Config.Image)
        real_image=$(get .Image)
        image_date=$($DOCKER_CMD inspect $real_image | jq -r .[0].Created[0:16])
        echo -e "$box\t$running\t$started\t$finished\t$image\t$image_date"
    done
}

function quit {
    echo $1
    exit 1
}

function usage {
    name=`basename $0`
    ____=$(sed 's/./ /g' <<< $name) # space for alignment
    cat <<__EOF

  $name - tool to manage disposable development environments (devboxes)

    devboxes are docker containers starting into a shell.
    all devboxes are 'namespaced' in docker via a common name prefix ($DOCKER_PREFIX).

  usage:

    $name list                       - list all devboxes
    $name attach <devbox>            - attach to a existing devbox
    $name rm <devbox> [<devbox>]*    - create devbox(es)
    $name create <devbox> [<docker-params>] [image] [shell]
    $____                            - create a new devbox with name <devbox>

    $name build <image> [ <url> | <path> | - ]
    $____                            - build an image from a Dockerfile (see 'docker build --help')


  tips:

    $name create <devbox> --rm       - remove devbox after shell has quit

  configuration (set in ~/.devboxrc):

    DEFAULT_IMAGE = $DEFAULT_IMAGE
    DEFAULT_SHELL = $DEFAULT_SHELL

__EOF
    exit 0
}

init
main $@

